{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/younes/Desktop/ecommerce/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","orderCreate","orderDetails","orderPay","orderListMy","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,4BAA1D;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,EAAmEC,wBAAnE,EAA6FC,eAA7F,QAAmH,yBAAnH;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,eAAlD,EAAmEC,kBAAnE,QAA4F,0BAA5F;AAGA,MAAMC,OAAO,GAAGhB,eAAe,CAAC;AAC5BiB,EAAAA,WAAW,EAAGb,kBADc;AAE5Bc,EAAAA,cAAc,EAAGb,qBAFW;AAI5Bc,EAAAA,IAAI,EAAEb,WAJsB;AAK5Bc,EAAAA,SAAS,EAAGb,gBALgB;AAM5Bc,EAAAA,YAAY,EAAEb,mBANc;AAO5Bc,EAAAA,WAAW,EAAGb,kBAPc;AAQ5Bc,EAAAA,iBAAiB,EAAGb,wBARQ;AAS5Bc,EAAAA,QAAQ,EAAGb,eATiB;AAW5Bc,EAAAA,WAAW,EAAGb,kBAXc;AAY5Bc,EAAAA,YAAY,EAAGb,mBAZa;AAa5Bc,EAAAA,QAAQ,EAAEb,eAbkB;AAc5Bc,EAAAA,WAAW,EAAGb;AAdc,CAAD,CAA/B;AAiBA,MAAMc,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADyB,GACuB,EADpD;AAGA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GACuB,IADnD;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAC/BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAD+B,GACuB,EAD1D;AAGA,MAAMK,YAAY,GAAG;AACjBjB,EAAAA,IAAI,EAAE;AACFkB,IAAAA,SAAS,EAAER,oBADT;AAEFS,IAAAA,eAAe,EAAEH;AAFf,GADW;AAKjBf,EAAAA,SAAS,EAAE;AAAEmB,IAAAA,QAAQ,EAAEL;AAAZ;AALM,CAArB;AAQA,MAAMM,UAAU,GAAG,CAACtC,KAAD,CAAnB;AAEA,MAAMuC,KAAK,GAAG1C,WAAW,CAACiB,OAAD,EAAUoB,YAAV,EAAwBjC,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { productListReducer, productDetailsReducer } from './reducers/productReducers'\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer,userUpdateProfileReducer, userListReducer} from './reducers/userReducers'\r\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer} from './reducers/orderReducers'\r\n\r\n\r\nconst reducer = combineReducers({\r\n    productList : productListReducer,\r\n    productDetails : productDetailsReducer,\r\n\r\n    cart: cartReducer,\r\n    userLogin : userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails : userDetailsReducer,\r\n    userUpdateProfile : userUpdateProfileReducer,\r\n    userList : userListReducer,\r\n\r\n    orderCreate : orderCreateReducer,\r\n    orderDetails : orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderListMy : orderListMyReducer,\r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\r\n    JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\r\n    JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\r\n    JSON.parse(localStorage.getItem('shippingAddress')) : {}\r\n\r\nconst initialState = {\r\n    cart: {\r\n        cartItems: cartItemsFromStorage,\r\n        shippingAddress: shippingAddressFromStorage,\r\n    },\r\n    userLogin: { userInfo: userInfoFromStorage },\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}